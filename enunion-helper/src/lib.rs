use std::{
    fmt::Write as _,
    fs::{self, OpenOptions},
    io,
    io::Write,
    path::PathBuf,
    process::ExitStatus,
};

#[cfg(target_family = "unix")]
pub use std::os::unix::process::ExitStatusExt;
#[cfg(target_os = "windows")]
pub use std::os::windows::process::ExitStatusExt;

/// Post-build helper event
///
/// This function appends the generated TypeScript code with enums
/// from enunion to index.d.ts, which is generated by the napi library.
/// The folder enunion-generated-ts and index.d.ts must be in one directory.
/// For TypeScript only.

pub async fn post_build(
    enunion_target_path: PathBuf,
    definitions_file_path: PathBuf,
    is_platform: bool,
    specified_js: Option<PathBuf>,
    remove_enunion_gen_folder: bool,
) -> Result<(), ExitStatus> {
    let enunion_path = enunion_target_path.join("enunion-generated-ts");

    let mut out_ts = match OpenOptions::new().append(true).open(&definitions_file_path) {
        Ok(out_ts) => out_ts,
        Err(e) => {
            eprintln!("Could not open file {:?}: {:?}", definitions_file_path, e);
            return Err(ExitStatus::from_raw(1));
        }
    };

    let mut out_js = if is_platform {
        Some(
            OpenOptions::new()
                .append(true)
                .open(
                    specified_js
                        .clone()
                        .unwrap_or_else(|| PathBuf::from("index.js")),
                )
                .map_err(|e| {
                    eprintln!("Could not open JavaScript file: {:?}", e);
                    ExitStatus::from_raw(1)
                })?,
        )
    } else {
        None
    };

    let read_dir_iter = match fs::read_dir(&enunion_path) {
        Ok(i) => i,
        Err(e) => {
            eprintln!(
                "Could not read directory {:?}, this may be because there was nothing to do. {:?}",
                enunion_path, e
            );
            return Err(ExitStatus::from_raw(1));
        }
    };

    let mut read_dir_entries: Vec<_> = match read_dir_iter.collect::<Result<_, io::Error>>() {
        Ok(entries) => entries,
        Err(e) => {
            eprintln!(
                "Could not collect directory entries for {:?}. Reason: {:?}",
                enunion_path, e
            );
            return Err(ExitStatus::from_raw(1));
        }
    };
    read_dir_entries.sort_unstable_by_key(|d| d.path().display().to_string());

    let mut ts_content = String::from("// -- BEGIN ENUNION GENERATED CODE --\n\n");
    let mut js_content = if is_platform {
        Some(String::from("// -- BEGIN ENUNION GENERATED CODE --\n\n"))
    } else {
        None
    };

    for entry in read_dir_entries {
        let path = entry.path();
        let content = match fs::read_to_string(&path) {
            Ok(c) => c,
            Err(e) => {
                eprintln!("Failed to read file {:?}: {:?}", path, e);
                return Err(ExitStatus::from_raw(1));
            }
        };

        if path.extension().and_then(|o| o.to_str()) == Some("ts") {
            writeln!(ts_content, "{}", content).unwrap();
        } else if path.extension().and_then(|o| o.to_str()) == Some("js") {
            if let Some(ref mut js) = js_content {
                writeln!(js, "{}", content).unwrap();
            }
        }
    }

    writeln!(ts_content, "// -- END ENUNION GENERATED CODE --").unwrap();
    out_ts.write_all(ts_content.as_bytes()).map_err(|e| {
        eprintln!(
            "Failed to write to file {:?}: {:?}",
            definitions_file_path, e
        );
        ExitStatus::from_raw(1)
    })?;

    if let Some(mut js) = js_content {
        writeln!(js, "// -- END ENUNION GENERATED CODE --").unwrap();
        if let Some(ref mut out_js) = out_js {
            out_js.write_all(js.as_bytes()).map_err(|e| {
                eprintln!("Failed to write to JavaScript file: {:?}", e);
                ExitStatus::from_raw(1)
            })?;
        }
    }
    if remove_enunion_gen_folder {
        let _ = fs::remove_dir_all(enunion_path);
    }

    println!("TypeScript and JavaScript files merged successfully!");
    Ok(())
}
